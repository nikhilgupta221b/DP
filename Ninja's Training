1. Top Down (Memoization)

int helper(int n, int last, vector<vector<int>>& points, vector<vector<int>>& dp){
    if (dp[n][last] != -1) return dp[n][last];
    
    if (n == 0) {
        int maxpoints = 0;
        for (int i = 0; i <=2; i++){
            if (i != last){   // jo next day pe kar liya usko chor ke sab karna hai aur max lena hai
                int point = points[0][i];
                maxpoints = max(maxpoints, point);
            }
        }
        return dp[n][last] = maxpoints;
    }
    int maxpoints = 0;
    for (int i = 0; i <= 2; i++){
        if (i != last){ // last ke alawa sab karo aur us din ke point jor ke recursion call kardo
            int point = points[n][i] + helper(n-1, i, points, dp);
            maxpoints = max (maxpoints, point);
        }
    }
    return dp[n][last] = maxpoints;
}   

int ninjaTraining(int n, vector<vector<int>> &points)
{   
    vector<vector<int>> dp(n, vector<int>(4, -1));
    return helper(n-1, 3, points, dp);
}

Complexity Analysis
Time Complexity: O(N*4*3)
Reason: There are N*4 states and for every state, we are running a for loop iterating three times.
Space Complexity: O(N) + O(N*4)
Reason: We are using a recursion stack space(O(N)) and a 2D array (again O(N*4)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)


2. Bottom Up (Tabulation)

int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n, vector<int>(4, 0));

    dp[0][0] = max(points[0][1], points[0][2]);
    dp[0][1] = max(points[0][0], points[0][2]);
    dp[0][2] = max(points[0][0], points[0][1]);
    dp[0][3] = max(max(points[0][0], points[0][1]), points[0][2]);

    for (int day = 1; day < n; day++){
        for (int last = 0; last <= 3; last++){ // pichle din kuch bhi task ho sakta hai
            dp[day][last] = 0;
            for (int task = 0; task <= 2; task++){
                if (task != last){
                    dp[day][last] = max(dp[day][last], points[day][task] + dp[day-1][task]);
                }
            }
        }
    }
    return dp[n-1][3];
}

Complexity Analysis
Time Complexity: O(N*4*3)
Reason: There are three nested loops
Space Complexity: O(N*4)
Reason: We are using an external array of size ‘N*4’’


3. Space Optimized

int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<int> prev(4);

    prev[0] = max(points[0][1], points[0][2]);
    prev[1] = max(points[0][0], points[0][2]);
    prev[2] = max(points[0][0], points[0][1]);
    prev[3] = max(max(points[0][0], points[0][1]), points[0][2]);

    for (int day = 1; day < n; day++){
        vector<int> temp(4, 0);
        for (int last = 0; last <= 3; last++){ // pichle din kuch bhi task ho sakta hai
            temp[last] = 0;
            for (int task = 0; task <= 2; task++){
                if (task != last){
                    temp[last] = max(temp[last], points[day][task] + prev[task]);
                }
            }
        }
        prev = temp;
    }
    return prev[3];
}

Complexity Analysis
Time Complexity: O(N*4*3)
Reason: There are three nested loops
Space Complexity: O(4)
Reason: We are using an external array of size ‘4’ to store only one row.
